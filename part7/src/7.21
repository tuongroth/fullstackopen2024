import React, { useState, useEffect } from 'react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { configureStore, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import {
  BrowserRouter as Router,
  Route,
  Link,
  Routes,
  useParams
} from 'react-router-dom';
import './App.css'; // Importing CSS for styling

// Redux slice for users
const userListSlice = createSlice({
  name: 'userList',
  initialState: [],
  reducers: {
    setUsers: (state, action) => action.payload,
  }
});

const { setUsers } = userListSlice.actions;

// Redux store
const store = configureStore({
  reducer: {
    userList: userListSlice.reducer,
  }
});

// Fetch users from the server
const fetchUsers = async (dispatch) => {
  try {
    const response = await axios.get('http://localhost:3001/users');
    dispatch(setUsers(response.data));
  } catch (error) {
    console.error('Error fetching users:', error);
  }
};

// Users list component
const UsersList = () => {
  const dispatch = useDispatch();
  const users = useSelector((state) => state.userList);

  useEffect(() => {
    fetchUsers(dispatch);
  }, [dispatch]);

  return (
    <div className="user-list">
      <h2>Users</h2>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Blogs created</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>
                <Link to={`/users/${user.id}`} className="user-link">
                  {user.name}
                </Link>
              </td>
              <td>{user.blogs.length}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// User details view
const User = () => {
  const { id } = useParams();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await axios.get(`http://localhost:3001/users/${id}`);
        setUser(response.data);
      } catch (error) {
        console.error('Error fetching user details:', error);
      }
    };
    fetchUser();
  }, [id]);

  if (!user) return <div>Loading...</div>;

  return (
    <div className="user-details">
      <h2>{user.name}</h2>
      <h3>Blogs</h3>
      <ul>
        {user.blogs.map((blog) => (
          <li key={blog.id}>{blog.title}</li>
        ))}
      </ul>
    </div>
  );
};

// Main App component with routing
const App = () => {
  return (
    <Router>
      <div className="app-container">
        <nav className="navbar">
          <Link to="/" className="nav-link">Home</Link>
          <Link to="/users" className="nav-link">Users</Link>
        </nav>
        <Routes>
          <Route path="/users" element={<UsersList />} />
          <Route path="/users/:id" element={<User />} />
        </Routes>
      </div>
    </Router>
  );
};

// Root component with Redux provider
const Root = () => {
  return (
    <Provider store={store}>
      <App />
    </Provider>
  );
};

export default Root;
