import express from 'express';
import cors from 'cors';
import { v1 as uuid } from 'uuid';

const app = express();
app.use(cors());
app.use(express.json());

// Define the Diagnosis type
type Diagnosis = {
  code: string;
  name: string;
  latin?: string; // optional field
};

// Sample diagnoses data
const diagnoses: Diagnosis[] = [
  { code: 'D01', name: 'Diagnosis 1' },
  { code: 'D02', name: 'Diagnosis 2', latin: 'Diagnostica Duo' },
];

// Define the Patient type
type Patient = {
  id: string;
  name: string;
  dateOfBirth: string;
  gender: string; // assuming gender is a string
  occupation: string;
  ssn: string; // this will be excluded from the response
};

// Sample patients data
const patients: Patient[] = [
  { id: '1', name: 'John Doe', dateOfBirth: '1990-01-01', gender: 'male', occupation: 'Developer', ssn: '123-45-6789' },
  { id: '2', name: 'Jane Doe', dateOfBirth: '1992-02-02', gender: 'female', occupation: 'Designer', ssn: '987-65-4321' },
];

// Utility type to exclude `ssn` from Patient type
type PublicPatient = Omit<Patient, 'ssn'>;

// GET endpoint for ping
app.get('/api/ping', (_req, res) => {
  res.send('pong');
});

// GET endpoint for diagnoses
app.get('/api/diagnoses', (_req, res) => {
  res.json(diagnoses);
});

// GET endpoint for patients, excluding `ssn`
app.get('/api/patients', (_req, res) => {
  const publicPatients: PublicPatient[] = patients.map(({ ssn, ...publicPatient }) => publicPatient);
  res.json(publicPatients);
});

// POST endpoint for adding patients
app.post('/api/patients', (req, res) => {
  const { name, dateOfBirth, gender, occupation, ssn } = req.body;

  if (!name || !dateOfBirth || !gender || !occupation || !ssn) {
    return res.status(400).json({ error: 'Missing fields' }); // Return if any field is missing
  }

  const newPatient: Patient = {
    id: uuid(), // generate a unique ID
    name,
    dateOfBirth,
    gender,
    occupation,
    ssn,
  };

  patients.push(newPatient); // add the new patient to the array

  // Respond with the newly created patient, excluding the ssn
  const { ssn: _, ...publicPatient } = newPatient; // omit ssn for response
  return res.status(201).json(publicPatient); // Always return a response
});

// Welcome message at the root
app.get('/', (_req, res) => {
  res.send('Welcome to the Patientor backend!');
});

// Server setup
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
