const express = require('express');
const { ApolloServer, gql, UserInputError } = require('apollo-server-express');
const mongoose = require('mongoose');
const cors = require('cors');

// Connect to MongoDB
mongoose.connect('mongodb+srv://fullstack:2r6FcH9cLQRdnXHJ@cluster0.xgr0xci.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB connected successfully');
}).catch(err => {
  console.error('MongoDB connection error:', err);
});

// Define your Mongoose schemas
const authorSchema = new mongoose.Schema({
  name: { type: String, required: true },
  born: { type: Number },
});

const bookSchema = new mongoose.Schema({
  title: { type: String, required: true, unique: true, minlength: 5 },
  published: { type: Number },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'Author' },
  genres: [{ type: String }],
});

const Author = mongoose.model('Author', authorSchema);
const Book = mongoose.model('Book', bookSchema);

// Define your GraphQL schema
const typeDefs = gql`
  type Author {
    name: String!
    born: Int
    bookCount: Int!
  }

  type Book {
    title: String!
    published: Int!
    author: Author!
    genres: [String!]!
    id: ID!
  }

  type Query {
    allBooks(author: String): [Book!]!
    allAuthors: [Author!]!
    hello: String
  }

  type Mutation {
    addBook(
      title: String!
      author: String!
      published: Int!
      genres: [String!]!
    ): Book!
    editAuthor(name: String!, setBornTo: Int!): Author
  }
`;

// Define your resolvers
const resolvers = {
  Query: {
    allBooks: async (_, { author }) => {
      const books = await Book.find().populate('author');
      if (author) {
        return books.filter(book => book.author.name === author);
      }
      return books;
    },
    allAuthors: async () => {
      const authors = await Author.find();
      return Promise.all(authors.map(async (author) => {
        const bookCount = await Book.countDocuments({ author: author._id });
        return {
          ...author.toObject(),
          bookCount,
        };
      }));
    },
    hello: () => 'Hello world!',
  },
  Mutation: {
    addBook: async (_, { title, author, published, genres }) => {
      let authorId = await Author.findOne({ name: author });
      if (!authorId) {
        authorId = await new Author({ name: author }).save();
      }

      const book = new Book({ title, author: authorId._id, published, genres });
      try {
        await book.save();
        return book.populate('author'); // Populate author details
      } catch (error) {
        if (error.name === 'ValidationError') {
          throw new UserInputError('Validation Error', { invalidArgs: error.errors });
        }
        throw new Error('Failed to save book');
      }
    },
    editAuthor: async (_, { name, setBornTo }) => {
      const author = await Author.findOne({ name });
      if (author) {
        author.born = setBornTo;
        try {
          await author.save();
        } catch (error) {
          if (error.name === 'ValidationError') {
            throw new UserInputError('Validation Error', { invalidArgs: error.errors });
          }
          throw new Error('Failed to update author');
        }
      }
      return author;
    },
  },
};

// Create an instance of ApolloServer
const server = new ApolloServer({ typeDefs, resolvers });

const startServer = async () => {
  await server.start();  // Await server start
  const app = express();
  app.use(cors());

  server.applyMiddleware({ app }); // Now apply middleware

  const PORT = 4000;
  app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}${server.graphqlPath}`);
  });
};

// Start the server
startServer().catch(err => {
  console.error('Error starting the server:', err);
});
