import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';
import { gql } from 'graphql-tag';

// Sample data
let books = [
  {
    title: 'Clean Code',
    author: 'Robert Martin',
    published: 2008,
    genres: ['programming', 'refactoring'],
  },
  {
    title: 'Agile Software Development',
    author: 'Robert Martin',
    published: 2002,
    genres: ['programming', 'agile'],
  },
  {
    title: 'Refactoring',
    author: 'Martin Fowler',
    published: 1999,
    genres: ['programming', 'refactoring'],
  },
];

let authors = [
  { name: 'Robert Martin', born: null },
  { name: 'Martin Fowler', born: null },
];

// Define the GraphQL schema
const typeDefs = gql`
  type Book {
    title: String!
    author: String!
    published: Int!
    genres: [String!]!
  }

  type Author {
    name: String!
    born: Int
    bookCount: Int!
  }

  type Query {
    bookCount: Int
    authorCount: Int
    allBooks(author: String, genre: String): [Book!]!
    allAuthors: [Author!]!
  }

  type Mutation {
    addBook(
      title: String!
      author: String!
      published: Int!
      genres: [String!]!
    ): Book!
  }
`;

// Define resolvers for the queries and mutations
const resolvers = {
  Query: {
    // Return the total number of books
    bookCount: () => books.length,

    // Return the total number of authors
    authorCount: () => authors.length,

    // Return all books, or filter by author and/or genre if provided
    allBooks: (root, args) => {
      let filteredBooks = books;

      if (args.author) {
        filteredBooks = filteredBooks.filter(
          (book) => book.author === args.author
        );
      }

      if (args.genre) {
        filteredBooks = filteredBooks.filter((book) =>
          book.genres.includes(args.genre)
        );
      }

      return filteredBooks;
    },

    // Return all authors with their bookCount
    allAuthors: () => {
      return authors.map((author) => {
        return {
          name: author.name,
          born: author.born,
          bookCount: books.filter((book) => book.author === author.name).length,
        };
      });
    },
  },

  Mutation: {
    // Add a new book and author (if necessary)
    addBook: (root, args) => {
      // Check if the author exists, if not, add the author
      let author = authors.find((a) => a.name === args.author);
      if (!author) {
        author = { name: args.author, born: null };
        authors.push(author);
      }

      // Add the new book
      const newBook = {
        title: args.title,
        author: args.author,
        published: args.published,
        genres: args.genres,
      };
      books.push(newBook);

      return newBook;
    },
  },
};

// Create and start the Apollo GraphQL server
async function startServer() {
  const server = new ApolloServer({
    typeDefs,
    resolvers,
  });

  const { url } = await startStandaloneServer(server, {
    listen: { port: 4000 },
  });

  console.log(`Server running at ${url}`);
}

startServer();
