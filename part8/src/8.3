import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';
import { gql } from 'graphql-tag';

// Sample data
const books = [
  {
    title: 'Clean Code',
    author: 'Robert Martin',
    published: 2008,
    genres: ['programming'],
  },
  {
    title: 'Agile Software Development',
    author: 'Robert Martin',
    published: 2002,
    genres: ['programming', 'agile'],
  },
  {
    title: 'Refactoring',
    author: 'Martin Fowler',
    published: 1999,
    genres: ['programming'],
  },
  {
    title: 'Crime and Punishment',
    author: 'Fyodor Dostoevsky',
    published: 1866,
    genres: ['fiction', 'classic'],
  },
  {
    title: 'The Idiot',
    author: 'Fyodor Dostoevsky',
    published: 1869,
    genres: ['fiction', 'classic'],
  },
  {
    title: 'Implementing Domain-Driven Design',
    author: 'Vaughn Vernon',
    published: 2013,
    genres: ['programming'],
  },
  {
    title: 'Design Patterns',
    author: 'Erich Gamma',
    published: 1994,
    genres: ['programming'],
  },
];

const authors = [
  { name: 'Robert Martin' },
  { name: 'Martin Fowler' },
  { name: 'Fyodor Dostoevsky' },
  { name: 'Vaughn Vernon' },
  { name: 'Erich Gamma' },
];

// Define the GraphQL schema
const typeDefs = gql`
  type Book {
    title: String!
    author: String!
    published: Int!
    genres: [String!]!
  }

  type Author {
    name: String!
    bookCount: Int!
  }

  type Query {
    bookCount: Int
    authorCount: Int
    allBooks(author: String): [Book!]!
    allAuthors: [Author!]!
  }
`;

// Define resolvers for the queries
const resolvers = {
  Query: {
    // Return the total number of books
    bookCount: () => books.length,

    // Return the total number of authors
    authorCount: () => authors.length,

    // Return all books, or filter by author if provided
    allBooks: (root, args) => {
      if (!args.author) {
        return books;
      }
      return books.filter(book => book.author === args.author);
    },

    // Return all authors with their bookCount
    allAuthors: () => {
      return authors.map(author => {
        return {
          name: author.name,
          bookCount: books.filter(book => book.author === author.name).length,
        };
      });
    },
  },
};

// Create and start the Apollo GraphQL server
async function startServer() {
  const server = new ApolloServer({
    typeDefs,
    resolvers,
  });

  const { url } = await startStandaloneServer(server, {
    listen: { port: 4000 },
  });

  console.log(`Server running at ${url}`);
}

startServer();
