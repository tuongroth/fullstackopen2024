import React, { useEffect, useState } from 'react';
import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client';

// GraphQL Query to get books by genre
const GET_BOOKS_BY_GENRE = gql`
  query GetBooksByGenre($genre: String!) {
    allBooks(genre: $genre) {
      title
      published
      author {
        name
      }
      genres
    }
  }
`;

// Component to display books by genre
const BooksByGenre = ({ genre }) => {
  const { loading, error, data } = useQuery(GET_BOOKS_BY_GENRE, {
    variables: { genre },
  });

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  return (
    <div>
      <h2>Books in Genre: {genre}</h2>
      <ul>
        {data.allBooks.map((book) => (
          <li key={book.title}>
            <strong>{book.title}</strong> by {book.author.name} ({book.published})
            <br />
            Genres: {book.genres.join(', ')}
          </li>
        ))}
      </ul>
    </div>
  );
};

// Main App component
const App = () => {
  const [genre, setGenre] = useState('fiction'); // Default genre

  return (
    <div>
      <h1>Book List</h1>
      <label>
        Select Genre:
        <select onChange={(e) => setGenre(e.target.value)} value={genre}>
          <option value="fiction">Fiction</option>
          <option value="mystery">Mystery</option>
          <option value="fantasy">Fantasy</option>
          <option value="non-fiction">Non-Fiction</option>
          {/* Add more genres as needed */}
        </select>
      </label>
      <BooksByGenre genre={genre} />
    </div>
  );
};

// Apollo Client setup
const client = new ApolloClient({
  uri: 'http://localhost:4000', // Adjust if your GraphQL server is on a different URL
  cache: new InMemoryCache(),
});

// Render the App
const Root = () => (
  <ApolloProvider client={client}>
    <App />
  </ApolloProvider>
);

export default Root;
