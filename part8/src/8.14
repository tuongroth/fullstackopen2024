const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');
const mongoose = require('mongoose');
const cors = require('cors');

// MongoDB connection
mongoose.connect('mongodb+srv://fullstack:2r6FcH9cLQRdnXHJ@cluster0.xgr0xci.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB connected successfully');
}).catch(err => {
  console.error('MongoDB connection error:', err);
});

// Define Author and Book schemas
const authorSchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true },
  born: { type: Number }
});

const bookSchema = new mongoose.Schema({
  title: { type: String, required: true, unique: true },
  published: { type: Number, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'Author', required: true },
  genres: [{ type: String }]
});

// Create models
const Author = mongoose.model('Author', authorSchema);
const Book = mongoose.model('Book', bookSchema);

// Define GraphQL schema
const typeDefs = gql`
  type Author {
    id: ID!
    name: String!
    born: Int
    bookCount: Int
  }

  type Book {
    id: ID!
    title: String!
    published: Int!
    author: Author!
    genres: [String!]!
  }

  type Query {
    allBooks(author: String): [Book!]!
    allAuthors: [Author!]!
  }

  type Mutation {
    addBook(title: String!, author: String!, published: Int!, genres: [String!]!): Book!
    editAuthor(name: String!, setBornTo: Int!): Author
  }
`;

// Define resolvers
const resolvers = {
  Query: {
    allBooks: async (_, { author }) => {
      const books = await Book.find({}).populate('author');
      return author ? books.filter(book => book.author.name === author) : books;
    },
    allAuthors: async () => {
      const authors = await Author.find({});
      return authors;
    },
  },
  Mutation: {
    addBook: async (_, { title, author, published, genres }) => {
      const authorDoc = await Author.findOne({ name: author });
      if (!authorDoc) {
        throw new Error('Author not found');
      }
      const book = new Book({ title, published, author: authorDoc._id, genres });
      return await book.save();
    },
    editAuthor: async (_, { name, setBornTo }) => {
      const author = await Author.findOneAndUpdate({ name }, { born: setBornTo }, { new: true });
      return author;
    },
  },
  Author: {
    bookCount: async (author) => {
      const count = await Book.countDocuments({ author: author.id });
      return count;
    },
  },
};

// Create ApolloServer instance
const server = new ApolloServer({ typeDefs, resolvers });

const startServer = async () => {
  await server.start();
  const app = express();
  app.use(cors());
  server.applyMiddleware({ app });

  const PORT = 4000;
  app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}${server.graphqlPath}`);
  });
};

// Start the server
startServer().catch(err => {
  console.error('Error starting the server:', err);
});
