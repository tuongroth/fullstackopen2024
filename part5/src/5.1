import React, { useState, useEffect } from 'react';

const App = () => {
  const [blogs, setBlogs] = useState([]);
  const [user, setUser] = useState(null);
  const [accessToken, setAccessToken] = useState('');

  // Fetch blogs after getting the access token
  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const response = await fetch('https://eu-west-2.aws.data.mongodb-api.com/app/data-zbmnuij/endpoint/data/v1/action/findOne', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`, // Use the actual access token
          },
          body: JSON.stringify({
            collection: 'notes', // Collection name
            database: 'noteApp',
            dataSource: 'Cluster0',
            filter: { "_id": { "$oid": "66d1a64d1412eda8c7500216" } }, // Filter for a specific note
            projection: { "_id": 1, "title": 1, "content": 1 } // Fields to retrieve
          })
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        setBlogs([data.document]); // Assuming you're getting a single document
      } catch (error) {
        console.error('Failed to fetch blogs:', error);
      }
    };

    if (accessToken) {
      fetchBlogs();
    }
  }, [accessToken]);

  // Handle user login and retrieve access token
  const handleLogin = async (event) => {
    event.preventDefault();

    try {
      const response = await fetch('https://eu-west-2.aws.services.cloud.mongodb.com/api/client/v2.0/app/data-zbmnuij/auth/providers/local-userpass/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'rothtrancattuong0703@gmail.com',
          password: '123quenmatkhauu'
        })
      });

      if (!response.ok) {
        throw new Error('Login failed');
      }

      const userData = await response.json();
      setUser(userData);
      setAccessToken(userData.access_token); // Store access token for further requests
    } catch (error) {
      console.error('Failed to log in:', error);
    }
  };

  // Render login form if user is not authenticated
  if (!user) {
    return (
      <div>
        <h2>Login</h2>
        <form onSubmit={handleLogin}>
          <div>
            <input placeholder="Username" value="rothtrancattuong0703@gmail.com" readOnly />
          </div>
          <div>
            <input type="password" placeholder="Password" value="123quenmatkhauu" readOnly />
          </div>
          <button type="submit">Login</button>
        </form>
      </div>
    );
  }

  // Render blogs once data is fetched
  return (
    <div>
      <h2>Blogs</h2>
      {blogs.map(blog => (
        <div key={blog._id}>
          <h3>{blog.title}</h3>
          <p>{blog.content}</p>
        </div>
      ))}
    </div>
  );
};

export default App;
