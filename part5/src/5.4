import React, { useState, useEffect } from 'react';

const App = () => {
  const [blogs, setBlogs] = useState<any[]>([]);
  const [user, setUser] = useState<any>(null);
  const [accessToken, setAccessToken] = useState<string>('');
  const [newTitle, setNewTitle] = useState<string>(''); // State for new note title
  const [newContent, setNewContent] = useState<string>(''); // State for new note content

  // Fetch blogs after getting the access token
  useEffect(() => {
    const fetchBlogs = async () => {
      if (!accessToken) {
        console.log("No access token, skipping fetch.");
        return;
      }

      try {
        console.log("Fetching blogs with access token:", accessToken);
        const response = await fetch('https://eu-west-2.aws.data.mongodb-api.com/app/data-zbmnuij/endpoint/data/v1/action/findOne', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`, // Use the actual access token
          },
          body: JSON.stringify({
            collection: 'notes', // Collection name
            database: 'noteApp',
            dataSource: 'Cluster0',
            filter: { "_id": { "$oid": "66d1a64d1412eda8c7500216" } }, // Filter for a specific note
            projection: { "_id": 1, "title": 1, "content": 1 } // Fields to retrieve
          })
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        console.log("Fetched data:", data);
        setBlogs([data.document]); // Assuming you're getting a single document
      } catch (error) {
        console.error('Failed to fetch blogs:', error);
      }
    };

    fetchBlogs();
  }, [accessToken]);

  // Handle user login and retrieve access token
  const handleLogin = async (event: React.FormEvent) => {
    event.preventDefault();

    try {
      console.log("Logging in...");
      const response = await fetch('https://eu-west-2.aws.services.cloud.mongodb.com/api/client/v2.0/app/data-zbmnuij/auth/providers/local-userpass/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'rothtrancattuong0703@gmail.com',
          password: '123quenmatkhauu'
        })
      });

      if (!response.ok) {
        throw new Error('Login failed');
      }

      const userData = await response.json();
      console.log("Login successful, user data:", userData);
      setUser(userData);
      setAccessToken(userData.access_token); // Store access token for further requests
    } catch (error) {
      console.error('Failed to log in:', error);
    }
  };

  // Handle creating a new note
  const handleCreateNote = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!accessToken) {
      console.error("No access token, cannot create note.");
      return;
    }

    try {
      const response = await fetch('https://eu-west-2.aws.data.mongodb-api.com/app/data-zbmnuij/endpoint/data/v1/action/insertOne', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify({
          collection: 'notes',
          database: 'noteApp',
          dataSource: 'Cluster0',
          document: {
            title: newTitle,
            content: newContent,
          },
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create note');
      }

      const createdNote = await response.json();
      console.log("Note created:", createdNote);
      setBlogs([...blogs, createdNote.document]); // Add the newly created note to the list
      setNewTitle(''); // Clear the input fields
      setNewContent('');
    } catch (error) {
      console.error('Failed to create new note:', error);
    }
  };

  // Render login form if user is not authenticated
  if (!user) {
    return (
      <div>
        <h2>Login</h2>
        <form onSubmit={handleLogin}>
          <div>
            <input placeholder="Username" value="rothtrancattuong0703@gmail.com" readOnly />
          </div>
          <div>
            <input type="password" placeholder="Password" value="123quenmatkhauu" readOnly />
          </div>
          <button type="submit">Login</button>
        </form>
      </div>
    );
  }

  // Render blogs and create note form once data is fetched
  return (
    <div>
      <h2>Blogs</h2>
      {blogs.length > 0 ? (
        blogs.map(blog => (
          <div key={blog._id}>
            <h3>{blog.title}</h3>
            <p>{blog.content}</p>
          </div>
        ))
      ) : (
        <p>No blogs available.</p>
      )}
      <div>
        <h2>Create New Note</h2>
        <form onSubmit={handleCreateNote}>
          <div>
            <input
              type="text"
              placeholder="Title"
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
            />
          </div>
          <div>
            <textarea
              placeholder="Content"
              value={newContent}
              onChange={(e) => setNewContent(e.target.value)}
            />
          </div>
          <button type="submit">Create Note</button>
        </form>
      </div>
    </div>
  );
};

export default App;
