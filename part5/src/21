import React from 'react';
import { useMutation, useQuery, QueryClient, QueryClientProvider } from '@tanstack/react-query';
import axios from 'axios';

// Set up React Query Client
const queryClient = new QueryClient();

// Fetch anecdotes from the server
const getAnecdotes = async () => {
  const response = await axios.get('http://localhost:3001/anecdotes');
  return response.data;
};

// Add new anecdote to the server
const addAnecdote = async (newAnecdote) => {
  const response = await axios.post('http://localhost:3001/anecdotes', newAnecdote);
  return response.data;
};

// Anecdote Form Component
const AnecdoteForm = () => {
  const mutation = useMutation(addAnecdote, {
    onSuccess: () => {
      // Invalidate and refetch queries after a new anecdote is added
      queryClient.invalidateQueries(['anecdotes']);
    },
  });

  const handleSubmit = (event) => {
    event.preventDefault();
    const content = event.target.anecdote.value;
    if (content.length >= 5) {
      mutation.mutate({ content, votes: 0 });
      event.target.anecdote.value = '';  // Clear the input field
    } else {
      alert('Anecdote must be at least 5 characters long!');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input name="anecdote" placeholder="Enter a new anecdote" />
      <button type="submit">Add Anecdote</button>
    </form>
  );
};

// Anecdote List Component
const AnecdoteList = () => {
  const { data: anecdotes, isLoading, isError } = useQuery(['anecdotes'], getAnecdotes);

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error: Anecdote service not available due to problems in server.</div>;

  return (
    <ul>
      {anecdotes.map((anecdote) => (
        <li key={anecdote.id}>
          {anecdote.content} (votes: {anecdote.votes})
        </li>
      ))}
    </ul>
  );
};

// Main App Component
const App = () => {
  return (
    <div>
      <h1>Anecdotes</h1>
      <AnecdoteForm />
      <AnecdoteList />
    </div>
  );
};

// Root Component with React Query Provider
const Root = () => (
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
);

export default Root;
