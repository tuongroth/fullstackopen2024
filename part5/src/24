import React, { createContext, useReducer, useContext, useEffect } from 'react';
import { useQuery, useMutation, QueryClient, QueryClientProvider } from 'react-query';
import axios from 'axios';

// Create a QueryClient instance
const queryClient = new QueryClient();

// Define action types for notifications
const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';
const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION';

// Define action creators for notifications
const showNotification = (message, duration) => ({
  type: SHOW_NOTIFICATION,
  payload: { message, duration }
});

const hideNotification = () => ({
  type: HIDE_NOTIFICATION
});

// Initial state for notification
const initialNotificationState = {
  message: '',
  visible: false
};

// Reducer function for notification
const notificationReducer = (state, action) => {
  switch (action.type) {
    case SHOW_NOTIFICATION:
      return {
        message: action.payload.message,
        visible: true
      };
    case HIDE_NOTIFICATION:
      return {
        message: '',
        visible: false
      };
    default:
      return state;
  }
};

// Create a Notification Context
const NotificationContext = createContext();

export const useNotification = () => useContext(NotificationContext);

const NotificationProvider = ({ children }) => {
  const [state, dispatch] = useReducer(notificationReducer, initialNotificationState);

  useEffect(() => {
    let timer;
    if (state.visible) {
      timer = setTimeout(() => dispatch(hideNotification()), 5000);
    }
    return () => clearTimeout(timer);
  }, [state.visible]);

  return (
    <NotificationContext.Provider value={{ state, dispatch }}>
      {children}
      {state.visible && <div style={{ position: 'fixed', top: 0, right: 0, padding: '1rem', backgroundColor: 'lightgrey', border: '1px solid black' }}>{state.message}</div>}
    </NotificationContext.Provider>
  );
};

// Fetch function for anecdotes
const fetchAnecdotes = async () => {
  const response = await axios.get('http://localhost:3001/anecdotes');
  return response.data;
};

// Mutation function for adding new anecdotes
const addAnecdote = async (content) => {
  if (content.length < 5) {
    throw new Error('Anecdote must be at least 5 characters long.');
  }
  const response = await axios.post('http://localhost:3001/anecdotes', { content, votes: 0 });
  return response.data;
};

// Main App Component
const App = () => {
  const { dispatch } = useNotification();

  const { data: anecdotes, error, isLoading } = useQuery('anecdotes', fetchAnecdotes);
  const mutation = useMutation(addAnecdote, {
    onSuccess: (newAnecdote) => {
      dispatch(showNotification(`Added new anecdote: '${newAnecdote.content}'`, 5));
    },
    onError: (error) => {
      dispatch(showNotification(`Error: ${error.message}`, 5));
    }
  });

  const handleAddAnecdote = async () => {
    const content = prompt('Enter anecdote content:');
    if (content) {
      mutation.mutate(content);
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>An error occurred: {error.message}</div>;

  return (
    <div>
      <h1>Anecdotes</h1>
      <ul>
        {anecdotes.map(anecdote => (
          <li key={anecdote.id}>{anecdote.content}</li>
        ))}
      </ul>
      <button onClick={handleAddAnecdote}>Add Anecdote</button>
    </div>
  );
};

// Root Component with QueryClientProvider and NotificationProvider
const Root = () => (
  <QueryClientProvider client={queryClient}>
    <NotificationProvider>
      <App />
    </NotificationProvider>
  </QueryClientProvider>
);

export default Root;
