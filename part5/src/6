main.tsx


import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux'; // Import the Provider component
import App from './App';
import store from './store'; // Import the Redux store

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);


store.js
import { configureStore, createSlice } from '@reduxjs/toolkit';

// Create a slice for the counter
const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    good: 0,
    ok: 0,
    bad: 0
  },
  reducers: {
    incrementGood: (state) => {
      state.good += 1; // RTK allows direct mutation, handled internally
    },
    incrementOk: (state) => {
      state.ok += 1;
    },
    incrementBad: (state) => {
      state.bad += 1;
    },
    reset: () => ({
      good: 0,
      ok: 0,
      bad: 0
    })
  }
});

// Export the actions
export const { incrementGood, incrementOk, incrementBad, reset } = counterSlice.actions;

// Configure the store
const store = configureStore({
  reducer: counterSlice.reducer
});

export default store;

App.jsx

import { useDispatch, useSelector } from 'react-redux';
import { incrementGood, incrementOk, incrementBad, reset } from './store';

const App = () => {
  const dispatch = useDispatch();
  const { good, ok, bad } = useSelector((state) => state); // Get the state from the store

  return (
    <div>
      <h1>Give Feedback</h1>
      <button onClick={() => dispatch(incrementGood())}>Good</button>
      <button onClick={() => dispatch(incrementOk())}>Neutral</button>
      <button onClick={() => dispatch(incrementBad())}>Bad</button>
      <button onClick={() => dispatch(reset())}>Reset</button>

      <h2>Statistics</h2>
      <p>Good: {good}</p>
      <p>Neutral: {ok}</p>
      <p>Bad: {bad}</p>
      <p>Total: {good + ok + bad}</p>
    </div>
  );
};

export default App;
